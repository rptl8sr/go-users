openapi: 3.0.0
info:
  title: Users API
  description: API for user management
  version: 1.0.0

servers:
  - url: /api/v1

tags:
  - name: Users
    description: Users' management endpoints
  - name: Health
    description: Endpoints for health-check and status

paths:
  /health:
    get:
      tags:
        - Health
      summary: Service Health
      description: Service Health
      operationId: health
      responses:
        '200':
          description: Return 'OK' if server is up an running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    post:
      tags:
        - Users
      summary: Create new user
      description: Creates a new user in the system
      operationId: postUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: uint
        description: User ID
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Returns user information by ID
      operationId: getUser
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update user
      description: Replace user information
      operationId: putUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
      required:
        - email
        - first_name
        - last_name
      example:
        email: "user@example.com"
        first_name: "John"
        last_name: "Doe"

    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User's email address
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp
      required:
        - id
        - email
        - first_name
        - last_name
        - created_at
        - updated_at
      example:
        id: 1
        email: "user@example.com"
        first_name: "John"
        last_name: "Doe"
        created_at: "2024-03-20T10:00:00Z"
        updated_at: "2024-03-20T10:00:00Z"

    Health:
      description: Health response
      type: object
      properties:
        status:
          type: string
          description: Health response
          default: ok
      example:
        status: "ok"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      example:
        error: "User not found"